name: Deploy to AWS ECS

on:
  push:
    branches:
      - main

env:
  AWS_REGION: ap-northeast-1
  ECS_SERVICE: udemy_kenty_docker-practice-ecs-service
  ECS_CLUSTER: udemy_kenty_docker-practice-ecs-cluster
  ECS_TASK_DEFINITION: .aws/task-definition.json

permissions:
  contents: write

jobs:
  web-test-build-image:
    name: Web Container - Test and Build
    runs-on: ubuntu-20.04
    defaults:
      run:
        working-directory: ./web
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Build an Image and Run Tests
        run: |
          docker image build -t temp_web_image_name:latest --build-arg REACT_APP_API_URL=http://localhost:8080/api/ .

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to AWS ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Push Image to AWS ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.AWS_ECR_WEB_SERVER_REPOSITORY }}
        run: |
          docker image tag temp_web_image_name:latest ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:latest
          docker image push ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:latest

  api-test-build-image:
    name: API Container - Test and Build
    runs-on: ubuntu-20.04
    defaults:
      run:
        working-directory: ./api
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Build an Image and Run Tests
        run: |
          docker image build -t temp_api_image_name:latest .

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to AWS ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Push Image to AWS ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: ${{ secrets.AWS_ECR_API_SERVER_REPOSITORY }}
        run: |
          docker image tag temp_api_image_name:latest ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:latest
          docker image push ${{ env.ECR_REGISTRY }}/${{ env.ECR_REPOSITORY }}:latest

  deploy:
    name: Deploy to AWS ECS
    runs-on: ubuntu-20.04
    needs:
      - web-test-build-image
      - api-test-build-image
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to AWS ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      # 既存のタスク定義を更新する
      - name: Fill in the new image ID in the Amazon ECS task definition for web
        id: render-web-task-definition
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION }}
          container-name: web
          image: ${{ steps.login-ecr.outputs.registry }}/${{ secrets.AWS_ECR_WEB_SERVER_REPOSITORY }}

      # 既存のタスク定義を更新する
      - name: Fill in the new image ID in the Amazon ECS task definition for api
        id: render-api-task-definition
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION }}
          container-name: api
          image: ${{ steps.login-ecr.outputs.registry }}/${{ secrets.AWS_ECR_API_SERVER_REPOSITORY }}

      - name: Deploy to AWS ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.render-web-task-definition.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE }}
          cluster: ${{ env.ECS_CLUSTER }}
